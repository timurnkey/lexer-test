use crate::ast::{Expr, Literal, AccessOp};
use lalrpop_util::ParseError;

grammar;

pub Expr: Box<Expr> = {
    <left:Expr> <op:AccessOp> => Box::new(Expr::Access(left, op)),
    Term,
};

Term: Box<Expr> = {
    Literal => Box::new(Expr::Literal(<>)),
    "[" <WithCommas<Expr>> "]" => Box::new(Expr::List(<>)),
    "(" <Expr> ")",
};

AccessOp: AccessOp = {
    r"\[[0-9]+\]" =>? {
        let parts = &<>[1..(<>.len() - 1)];
        let index = parts.parse::<u32>().map_err(|e| ParseError::User{
            error: "unable to parse access operation to u32",
        })?;

        Ok(AccessOp::Index(index))
    },
};

WithCommas<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Literal: Literal = {
    // int
    "0" => Literal::Int(0),
    r"[1-9]+[0-9]*" =>? {
        let i = <>.parse::<i128>().map_err(|e| ParseError::User{
            error: "unable to parse int to i128",
        })?;

        Ok(Literal::Int(i))
    },
};
